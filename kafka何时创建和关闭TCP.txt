1.  KafkaProducer 何时创建TCP连接呢？
在创建 KafkaProducer 实例时，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时首先会创建与 bootstrap.servers 中所有 Broker的TCP链接（一般选择3-4台即可，连接到任意一Broker就能拿到整个集群中所有Broker的信息）。
TCP 连接还可能在两个地方被创建：
一个是在更新元数据后，比如Producer给一个不存在的Topic发送消息，Broker会告诉Producer这个Topic不存在，这时Producer会发送METADATA请求给Kafka集群，获取最新的元数据信息。Producer通过metadata.max.age.ms参数定期的去更新元数据信息，默认值是5分钟，即300000.
另一个是在消息发送时。Producer发现并不存在与目标Broker的连接。

2. KafkaProducer 何时关闭TCP?
a.用户主动关闭：例如使用“kill -9 进程号”主动关闭了KafkaProducer程序
b.Kafka自动关闭，connections.max.idle.ms默认是9分钟，即9分钟没有任何请求流过某个TCP，那么Kafka会把该TCP链接关掉。设置为-1则是永久长连接，不关闭。

3. 消费者端主要的程序入口是 KafkaConsumer 类。和生产者不同的是，构建 KafkaConsumer 实例时是不会创建任何 TCP 连接的，也就是说，当你执行完 new KafkaConsumer(properties) 语句后，你会发现，没有 Socket 连接被创建出来。
TCP 连接是在调用 KafkaConsumer.poll 方法时被创建的。

在 poll 方法内部有 3 个时机可以创建 TCP 连接：
1）发起 FindCoordinator 请求时
还记得消费者端有个组件叫协调者（Coordinator）吗？它驻留在 Broker 端的内存中，负责消费者组的组成员管理和各个消费者的位移提交管理。当消费者程序首次启动调用 poll 方法时，它需要向 Kafka 集群发送一个名为 FindCoordinator 的请求，希望 Kafka 集群告诉它哪个 Broker 是管理它的协调者。消费者应该向哪个 Broker 发送FindCoordinator请求？
消费者程序会向集群中当前负载最小的那台 Broker 发送请求。负载是如何评估的呢？其实很简单，就是看消费者连接的所有 Broker 中，谁的待发送请求最少。

2）连接协调者时
经过FindCoordinator ，消费者知晓了真正的协调者后，会创建连向该 Broker 的 Socket 连接。只有成功连入协调者，协调者才能开启正常的组协调操作，比如加入组、等待组分配方案、心跳请求处理、位移获取、位移提交等。

3）消费数据时
消费者会为每个要消费的分区创建与该分区领导者副本所在 Broker 连接的 TCP。举个例子，假设消费者要消费 5 个分区的数据，这 5 个分区各自的领导者副本分布在 4 台 Broker 上，那么该消费者在消费时会创建与这 4 台 Broker 的 Socket 连接。

简单的说，就是：确定协调者和获取集群元数据；连接协调者，令其执行组成员管理操作；执行实际的消息获取。
针对上面提到的三类 TCP 连接，你需要注意的是，当第三类 TCP 连接成功创建后，消费者程序就会废弃第一类 TCP 连接，之后在定期请求元数据时，它会改为使用第三类 TCP 连接。也就是说，最终你会发现，第一类 TCP 连接会在后台被默默地关闭掉。对一个运行了一段时间的消费者程序来说，只会有后面两类 TCP 连接存在。

4. KafkaConsumer何时关闭TCP连接？
1）主动关闭
主动关闭是指你显式地调用消费者 API 的方法去关闭消费者，具体方式就是手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令，不论是 Kill -2 还是 Kill -9
2）自动关闭
Kafka 自动关闭是由消费者端参数 connection.max.idle.ms 控制的，该参数现在的默认值是 9 分钟，即如果某个 Socket 连接上连续 9 分钟都没有任何请求“过境”的话，那么消费者会强行“杀掉”这个 Socket 连接。

如果在编写消费者程序时，你使用了循环的方式来调用 poll 方法消费消息，那么上面提到的所有请求都会被定期发送到 Broker，因此这些 Socket 连接上总是能保证有请求在发送，从而也就实现了“长连接”的效果。